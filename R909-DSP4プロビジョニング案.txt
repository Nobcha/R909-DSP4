✅ 参考) 旧ポート割り当て (ATmega328P時)
機能	ピン	用途
OLED I2C SDA	A4	U8g2接続I2C SDA
OLED I2C SCL	A5	U8g2接続I2C SCL
ロータリーA相	D2	回転検出A相
ロータリーB相	D3	回転検出B相
ロータリースイッチ	A0	短押し/長押し検出
Si4732 RESET	A3	Si4732ハードリセット
スケルチ出力	D4	RF基板へスケルチ制御
アナログポートでスイッチ　A2

✅1) ポート割り当て (ESP32-C3時)
機能	ピン	用途
OLED I2C SDA	GPIO8	U8g2接続I2C SDA  　// RF＃３／＃１１
OLED I2C SCL	GPIO9	U8g2接続I2C SCL 　// RF＃4／＃１１
ロータリーA相	GPIO2	回転検出A相
ロータリーB相	GPIO3	回転検出B相
ロータリースイッチ	GPIO4	短押し/長押し検出
Si4732 RESET	GPIO6	Si4732ハードリセット // RF＃5／＃１１
スケルチ出力	GPIO7	RF基板へスケルチ制御 　// RF＃6／＃１１
ADC入力	GPIO0(A0)	音声信号レベル入力　// RF＃6／＃１１　要対策
アナログポートでスイッチ　A1

✅ 2) 制御対象定義
    Si4732
        周波数設定（AM:21.4MHｚ、ＦＭ：VFO操作）
        モード切替（AM/NFMなど）
        IF帯域幅選択
　　ＲＳＳＩ
　　ボリウム設定
        ハードウェアリセット

    OLED表示 (U8g2)
        周波数表示
        空港/局名表示（漢字可）
        Sメータ表示
        モード表示（AM/NFMなど）
        設定メニュー表示

    スケルチ制御
        音声信号やRF信号レベルでスケルチON/OFF
        GPIO出力でRF基板のAFミュートを制御

✅ 3) キー操作割り当て（ロータリーエンコーダ短押し/長押し/回転）
操作種別	操作内容
回転	周波数ステップ変更
短押し	バンク/プリセット選択・確定
長押し	設定モード突入（ステップ/モード選択など）

✅ 4) 網羅機能
    周波数VFO操作
    バンク/プリセット機能（国内主要空港をプリセット）
    空港/局名漢字表示
    AM/NFMモード切替
    IF帯域切替（Si4732機能に準じる）
    スケルチ制御
    OLED描画
    シリアルデバッグ

✅ 5) データ取り扱い

    国内空港周波数＆局名データはCSVで格納し、フラッシュに保存読み出し予定。

    周波数プリセットはEEPROM/NVSに保存、電源OFF後も復元可能。

    現在の周波数・モード・スケルチ設定などはRAM上の構造体で管理し、必要に応じてNVSへ保存。

✅ 6) 各機能操作定義・操作ルール

    VFO操作：ロータリー回転で±ステップ周波数移動。押下操作でＦＵＮＣＴＩＯＮ変更モードへ入れる。

    プリセット選択：単押しでＦＵＮＣＴＩＯＮ変更モードに入り、回転でＦＵＮＣＴＩＯＮ移動→短押しで確定。

    設定モード：二度押しで突入。モード選択（AM/NFM）、IF帯域幅設定、スケルチレベル調整などでＮＶＳへ設定値記憶。

    スケルチ：音声入力レベルをADCで監視し、設定した閾値以下ならスケルチON、上回ればOFF。

    周波数→局名変換：現在VFO周波数に一致（または近似）するプリセットデータから局名を表示。

✅ 7) 画面表示詳細（OLED 128x64想定）
    上段（大フォント）：現在の周波数
    中段（中/大フォント）：局名（例：「羽田塔台」）
    下段：
        モード（AM/NFM）、帯域（kHz単位）、スケルチ状態(SQ OPEN/CLOSE)
        Sメータ表示（バーグラフでシグナル強度）
        設定モード時は設定パラメータを順次表示

✅ ライブラリー
Si4732:Ricardo Carattiの Si4735 Arduino Library（Si4732互換）を使用
Si5351A：Etherkit Si5351 Arduino Library 、Jeffrey C. Moore作Arduino公式ライブラリマネージャ登録
#include <Wire.h>
#include <si5351.h>
#include <Rotary.h>
 //  Rotary encoder handler for arduino. v1.1、Copyright 2011 Ben Buxton.

